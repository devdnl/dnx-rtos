dnx RTOS 2.4.x Goose
====================
New Features, Improvements:
- Fixed ETH driver for stm32f1, stm32f4, stm32f7
- New drivers: PART (parition support), ZERO (zero copy), URANDOM (pseudo random copy)
- Added DMA support for UART driver in stm32fx architectures.
- Removed EFR32 architecture.
- Added flatfs file system (simple damage resistant file system).
- Added SDIO driver for stm32f7x architecture (polling and IRQ  modes only).
- Fixes in NVM driver (fast erase and error fix)
- const_cast() macro without type argument (cast to void*)
- Added wait() function (wait for process close)
- Added timer irq-based encoder driver for stm32f7x architecture
- Added zlib library
- Added usb host library (memory stick)
- Added return status for threads
- Added possibility to select custom linker script

dnx RTOS 2.4.0 Goose
====================
New Features, Improvements:
- Added stm32f3 port with basic drivers
- Added stm32f7 port with basic drivers
- Added stm32h7 port with basic drivers
- Added new BSPs (nucleo boards)
- Removed kworker mode 0 and 1
- Added heap and process consistency check
- Added killing program when crashes instead of entire system reboot
- Added strdup() and strndup() functions
- Added DMA, RTC, SPI, I2C, ETH drivers to stm32f7 port
- Improved heap memory managemnt
- Improved CAN driver
- Added IRQ, PWM drivers for stm32f3 & stm32f7 ports
- Removed configuration of EXTI lines in AFM driver
- Moved all generated files to build directory.
- and more...

dnx RTOS 2.3.0 Falcon
=====================
New Features, Improvements:
- Updated many drivers
- Added syscall mode 2 (flat syscall handling)
- Context switch optimizations
- EXT4FS fixes
- Updated FAT32 library
- Updated heap library (added memory consistency checker)
- LwIP update
- and more...

Fixed Bugs:
- Process handling
- and more...

dnx RTOS 2.2.1 Eagle
====================
New Features, Improvements:
- Updated documentation
- MAC setup at driver configuration
- Added driver_release2() function - release module by path
- Added NVM driver
- Added MD5, SHA1, SHA256 libraries
- Added option for TTY module to disable clearing of screen at initialization
- Added vector position setup in STM32F4 port
- Added RTC driver for STM32F4 port
- Added IRQ driver for STM32F4 port
- Moved driver API to driver visibility (not only file system)
- Added PWM driver for STM32F4 port
- System log store messages during runtime
- Better support of printk()
- Added small support for CTRL+C (ETX) signal
- Added script that verify program sytax
- Added more debug messages in DCI driver
- Fixed readdir in ext4fs (file/dir mode)
- Improved system stability by checking address range of objects in some cases
- Added SIPC protocol
- EXT4FS update

Fixed Bugs:
- Fixed I2C slave mode for STM32F1 port
- Fixed printk() module
- Fixed starting LSE clock in stm32f4
- Fixed RAMFS at file open (file handling)
- Fixed usage of sys_free() function in drivers and file systems
- Removed file system cache subsystem - many problems and errors, very slow
- Fixed SDIO write and read when buffer size is bigger than DMA transfer
- Process context switch
- Get semaphore counter value

dnx RTOS 2.2.0 Eagle
====================
New Features, Improvements:
- Created romfs - put local files to build image
- SPI: added separated transfers for ioctl() request
- CAN: added new driver for stm32f1 architecture
- Added possibility to mount selected dir of procfs

Fixed Bugs:
- System hangs on socket related resource cleaning

dnx RTOS 2.1.6 Dingo
====================
New Features, Improvements:
- Added Ready-To-Run I/O kworker threads (faster syscall handling)

Fixed Bugs:
- Fixed I2C slave mode (repeat-start detection)
- Corrected MS2TICK macro

dnx RTOS 2.1.4 Dingo
====================
New Features, Improvements:
- ioctl() function operates on file descriptor (fd_t) instead of file object (FILE)
- Added fileno() function to stdio.h library
- Added system library to analyze option strings (var1=val,flag,varn=val)
- Added commit hash to system version
- Added messages for system assert macro
- Switched to Configtool v1.2.1

Fixed Bugs:
- Fixed I2C driver in master mode

dnx RTOS 2.1.2 Dingo
====================
New Features, Improvements:
- Added I2C slave mode
- Added TCL-like interpreter (based on partcl)
- Added hexdump program

Fixed Bugs:
- Fixed invalid vector table for stm32f40x devices
- Fixed time cache handling (time() function)
- Fixed float point numbers handling in STM32F4xx port

dnx RTOS 2.1.0 Dingo
====================
New Features, Improvements:
- Added DMA drivers for STM32F1 and STM32F4 ports
- Added ETH, AFM  drivers for STM32F4 ports
- Redesigned UART and I2C drivers
- System reuse abandoned main stack as heap region
- Added SDIO driver for STM32F4 port
- Added btree library (for system and user space)

Fixed Bugs:
- Fixed stack sizes for system threads (take into account IRQ stack size)
- Fixed strtof() and strtod() functions
- Removed line clean VT100 command at beginning of line in TTY driver

dnx RTOS 2.0.0 Cheetah
======================
New Features, Improvements:
- File system cache subsystem
- Added processes
- Simplified system structure
- Improved system stability
- Implemented seperated system and process stacks
- Improved network layer
- Added new drivers
- Added new file systems (EEFS, EXT2,3,4)
- Any program can used as boot daemon
- Decreased RAM usage by static variables
- Moved additional programs to seperated repository: https://github.com/devdnl/dnx-rtos-app
- and more...

Fixed Bugs:
- Fixed USB device driver
- fopen(): incorrect behavior of "a" and "a+" modes (issue #156)
- readdir(): return object instead of pointer to object (issue #157)
- and more...

dnx RTOS 1.6.0 Butterfly
========================
New Features, Improvements:
- Added lua library (with lua and luac programs)
- Added time.h library
- Added RTC module
- Added "b" flags to the fopen() function
- Added Kernel Panic message from last fault session
- Added new interface function: program_get_exit_code()
- Added new network library functions: net_conn_set_receive_timeout() and net_conn_set_send_timeout()
- System monitor adds programs' stack size to the used memory
- Decreased RAM usage by system objects (file, mutex, semaphore, etc)
- Better seperation of software layers
- Implemented SNTP daemon
- Reimplemented Telnet daemon (allow to run any program)
- Reimplemented HTTP daemon (simple HTTP server)
- Applied new list implementation for core components (core, fs)
- Renamed programs

Fixed Bugs:
- Fixed kill message of "top" program (missing fflush())
- Fixed _program_new() function (invalid initialized object)
- Fixed realloc() function (old implementation works out of standard)
- TTY: fixed REFRESH_LAST_LINE and flush() requests
- Fixed memory leak in pipe implementation
- Fixed memory leak in mbus library

dnx RTOS 1.5.4 Antelope
=======================
New Features, Improvements:
- Added new configurations

Fixed Bugs:
- Fixed PLL module in the Configtool

dnx RTOS 1.5.2 Antelope
=======================
New Features, Improvements:
- Decreased ROM usage in some configurations

Fixed Bugs:
- Fixed net.h library (compiler error when network disabled)

dnx RTOS 1.5.0 Antelope
=======================
New Features, Improvements:
- Configtool: corrected project configuraiton script to be faster
- Configtool: the import of the configuration with unknown CPU architecture is disabled
- Configtool: release version is added to the title bar
- Configtool: tool uses save questions instead of discard
- Configtool: added status and tool bar, removed Save buttons from configuration forms
- Configtool: added tooltips to the AFIO configuration
- Configtool: added pin configuration propositions in the GPIO configuration script
- Configtool: added clock tree window to the PLL configuration
- Configtool: added a new program creator
- Configtool: added more network configuration options (basic and advanced)
- Configtool: added initd configuration. From/to BSP can be imported/exported initd configuration as well.
- net: added a new interface: net_conn_get_host_by_name() that resolves IP address by host name (by using DNS)
- Makefile: added flash and reset targets (targets are connected to the scripts)
- Eclipse: added Configtool to the External tools
- GPIO: defined pin that is not connected to any input/output (pin NONE)
- Added SLRE library (regular expressions)
- BSP: board support package for zl26arm and STM32USBcomp development boards added
- reimplemented mbus library
- Updated kernel to FreeRTOS V8.1.2
- Cleanup net.h library

Fixed Bugs:
- LOOP: module uses not C99-standard union construction
- Configtool: fixed bug in the GPIO configuration script (issue #124)
- TTY: problems with printing single characters (issue #139)
- printf(): fixed problem with %c and other formats (issue #134)
- Ethernet: fixed long pings and reimplement ETHMAC module and network manager (issue #151)
- Mutex: object delete causes a negative value of kernel memory usage (issue #152)

dnx RTOS 1.4.1
==============
New Features, Improvements:
- Added DMA support to the SPI driver
- SDSPI driver use SPI interface from SPI module instead of direct access
- Configtool: added possibility to import/export configuration
- puts() family functions are disabled together with printf() family functions

Fixed Bugs:
- Fixed bugs in the system monitor (linking error occured when major of features are disabled)
- Fixed bugs in several files, dnx/misc.h was not included directly what causes compiling errors

dnx RTOS 1.4.0
==============
New Features, Improvements:
- User's programs and libraries are automatically added to the project (without manual registration)
- Added IRQ driver
- Added I2C driver (master mode only)
- Added LOOP driver (virtual module that can be used to realize e.g. discs, etc (USBOTG pendrive as /dev/sdb))
- Added user space linked list library
- Improved objects validation (mutex, queue, sempahore, file, directory)
- Systematized files of the configtool
- Added to the configtool a wizard that helps in creation of new modules (issue #110)
- C++ support (programs, modules, and file system can be write by using C++)
- int_main() macro can be used interchangeably with PROGRAM_MAIN() macro

Fixed Bugs:
- modinit: fixed interpretation of driver_init() status (issue #95)
- SPI: fixed release function (issue #96)
- TTY: clear screen of not active terminal (issue #97)
- Fixed tasks killing if are in the mutex section (issue #92)
- Fixed memory and resource leaks (issue #105)
- Fixed rewind() function (issue #104)
- Fixed ICMP ping response (issue #111)
- Fixed mbus double type declaration (issue #112)

dnx RTOS 1.3.8
==============
New Features, Improvements:
- None

Fixed Bugs:
- Config tool: fixed problem with disabling non existing SPI devices
- Config tool: fixed minor problems
- SPI: driver fixed and simplified

dnx RTOS 1.3.7
==============
New Features, Improvements:
- driver_init(): returns driver ID on success, -1 on error
- SPI driver: simplified architecture and fixed RAW mode

Fixed Bugs:
- system monitor: possible system freeze when thread is canceled while is accessing to the system monitor
- binary semaphore: fixed bug that ignores initial value of binary semaphore (always 1 - opened)

dnx RTOS 1.3.6
==============
New Features, Improvements:
- New configuration tool
- TTY module: implemented recognition of TAB key
- TTY module: new ioctl request - REFRESH_LAST_LINE
- OS: alernative macro to determine global variables in programs: GLOBAL_VARIABLES
- dsh: added command hints by using TAB key

Fixed Bugs:
- TTY module: edit line was wrongly refreshed when last string was longer than new one (artefacts in line)

dnx RTOS 1.3.5
==============
New Features, Improvements:
- None

Fixed Bugs:
- Fixed Makefile (dependecies generation and echo handling by using /bin/echo program)

dnx RTOS 1.3.4
==============
New Features, Improvements:
- Implemented USB device driver for STM32F1xx microcontroller family
- Added new macros: static_cast(), const_cast(), reinterpret_cast() to indicate type casting in C code
- Corrected ioctl macros for VFS and PIPE (renamed)
- Corrected a status reporting of the card initialization in the SDSPI driver (MBR is no needed to get correct status)

Fixed Bugs:
- Fixed GPIO_PIN() macro
- Fixed TTY driver: process is starved when the buffer of a stdin is not read

dnx RTOS 1.3.3
==============
New Features, Improvements:
- Implemented mbus library (IPC Communication)

Fixed Bugs:
- dsh: The wrong message is printed when a starting program has not enough free memory
- Configuration scripts

dnx RTOS 1.3.2
==============
New Features, Improvements:
- Reduced the size of the modules registry
- Removed the STOP_IF() macro from the modules and file systems
- Implemented the type for the file open flags in the file systems and devices
- Protected some devices against initialization from two modules (e.g. SDSPI vs SPI)
- The system uses the heap size calculated by the linker script
- Added the sync() interface function to all file systems
- Simplified detecting the operting system by Makefile
- Simplified the system port file (removed some functions)

Fixed Bugs:
- SDSPI: System crashes when ioctl IOCTL_SDSPI__INITIALIZE_CARD request have NULL argument

dnx RTOS 1.3.1
==============
New Features, Improvements:
- Created centralized project configuration
- Implemented text and GUI configuration wizard
- Added documentation to application layer libraries

Fixed Bugs:
- none

dnx RTOS 1.3.0
==============
New Features, Improvements:
- CRC driver
- WDG driver
- procfs: program-file can be open (usefull in tests for program existing)
- cleaned up headers
- implemented common driver for pipes in file systems
- fgets() reads device files byte by byte (solve EOF problem)
- some files can be switched to unblocking read/write (some devices, pipes)
- driver layer corrected, used device id

Fixed Bugs:
- wrong behaviour of fgets() function in case of EOF
- SPI driver: system cannot force to close the opened SPI file
- VFS: errno = "No such device or address" even if file exist
- devfs: file closed cannot be opened again (Device or resource busy error)
- LFS: prints "Success" if file is opened instead of dir using opendir() function
- ifconfig crashes if tcpipd was killed
- TTY: process starvation by fast rate write cycles

dnx RTOS 1.2.3
==============
New Features, Improvements:
- removed redundant c++ switches in c files
- added stdin flush at program exit
- added new key codes to TTY driver (end, pgup, pgdn, ins)

Fixed Bugs:
- in the PuTTY terminal the screen is incorrectly cleared (cursor not got to home position)

dnx RTOS 1.2.2
==============
New Features, Improvements:
- cleaned up standard headers, more logical libraries localization
- pipe (in LFS and devfs) not blocks a program if stream is full

Fixed Bugs:
- none

dnx RTOS 1.2.1
==============
New Features, Improvements:
- implemented SPI driver
- implemented fully configurable STM32F10x PLL driver
- corrected UART driver
- implemented new TTY driver
- corrected Makefile to support C++ files compilation (first approach)

Fixed Bugs:
- TTY incorrectly shows lines (doubles)
- UART driver sometimes cuts data

dnx RTOS 1.2.0
==============
New Features, Improvements:
- added device lock, unlock functions
- added network support using lwIP library
- added netapi library which is supported by lwIP stack
- changed names of API functions to be more intuitive (e.g. mutex_new(), mutex_lock, etc)
- implemented errno.h and error support
- divided API functions to few libraries (easier to obtain needed functions)
- implemented thread functions in thread.h library
- accelerated program execution, applied shared global variables with standard objects (stdin etc)
- implemented pipe files in lfs and devfs file systems (mkfifo)
- implemented timer.h library to support software timers in 1ms resolution
- removed TRUE and FALSE definitions, use true and false defined in stdbool.h

Fixed Bugs:
- init_driver(): function doesn't color messages
- tty driver: new lines have incorrect lengths (too long)
- kernel configuration: switched in/out macros are inversely assigned
- system creates dead task if not enough free memory
- LFS not report errors when not enough free space left

dnx RTOS 1.1.0
==============
New Features, Improvements:
- simplified Makefile
- created fast devfs file system
- ioctl requests are calculated by special macros
- applied inline functions instead of macros (where possible)
- implemented queue support
- implemented "X" and "i" flags in printf() family functions
- simplified file system and driver layers (many changes)
- some paths are corrected with CWD path
- added init level to initd
- improved CPU load measurement
- removed not completed posix port
- removed appfs and moved this functionality to procfs
- added modules and file system templates
- big improvement of GPIO driver, simplified pin configuration and usage
- implemented system() function
- corrected stdio.h library

Fixed Bugs:
- TTY initialization fault
- fprintf() string terminator
- NULL pointer bug if module does not allocate memory region
- SDSPI: added interface function to mutex section
- system crash if program parameters start with " and ' characters
- fatfs memory leakage

dnx RTOS 1.0.0
==============
New Features, Improvements:
- first system release, basic features
